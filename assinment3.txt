// 1. Container With Most Water
    public static int MaxArea(int[] height)
    {
        int left = 0, right = height.Length - 1, maxArea = 0;
        while (left < right)
        {
            int minHeight = height[left] < height[right] ? height[left] : height[right];
            int area = minHeight * (right - left);
            maxArea = maxArea > area ? maxArea : area;

            if (height[left] < height[right])
                left++;
            else
                right--;
        }
        return maxArea;
    }

// 2. Merge Intervals
    public class Interval
    {
        public int Start, End;
        public Interval(int s, int e) { Start = s; End = e; }
    }

    public static List<Interval> MergeIntervals(List<Interval> intervals)
    {
        if (intervals.Count == 0) return new List<Interval>();

        // Simple bubble sort to avoid built-in sorting
        for (int i = 0; i < intervals.Count - 1; i++)
        {
            for (int j = 0; j < intervals.Count - i - 1; j++)
            {
                if (intervals[j].Start > intervals[j + 1].Start)
                {
                    Interval temp = intervals[j];
                    intervals[j] = intervals[j + 1];
                    intervals[j + 1] = temp;
                }
            }
        }

        List<Interval> merged = new List<Interval>();
        Interval temp = intervals[0];

        for (int i = 1; i < intervals.Count; i++)
        {
            if (intervals[i].Start <= temp.End)
                temp.End = temp.End > intervals[i].End ? temp.End : intervals[i].End;
            else
            {
                merged.Add(temp);
                temp = intervals[i];
            }
        }
        merged.Add(temp);
        return merged;
    }

// 3. Longest Substring Without Repeating Characters
    public static int LengthOfLongestSubstring(string s)
    {
        int maxLength = 0, left = 0;
        int[] charIndex = new int[128]; // ASCII characters
        for (int i = 0; i < 128; i++) charIndex[i] = -1;

        for (int right = 0; right < s.Length; right++)
        {
            if (charIndex[s[right]] >= left)
                left = charIndex[s[right]] + 1;

            charIndex[s[right]] = right;
            maxLength = maxLength > (right - left + 1) ? maxLength : (right - left + 1);
        }
        return maxLength;
    }

// 4. Rotate Image
    public static void Rotate(int[][] matrix)
    {
        int n = matrix.Length;
        for (int i = 0; i < n; i++)
        {
            for (int j = i; j < n; j++)
            {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }

        for (int i = 0; i < n; i++)
        {
            int left = 0, right = n - 1;
            while (left < right)
            {
                int temp = matrix[i][left];
                matrix[i][left] = matrix[i][right];
                matrix[i][right] = temp;
                left++;
                right--;
            }
        }
    }

// 5. Valid Parentheses
    public static bool IsValid(string s)
    {
        char[] stack = new char[s.Length];
        int top = -1;

        for (int i = 0; i < s.Length; i++)
        {
            char c = s[i];
            if (c == '(' || c == '{' || c == '[')
            {
                stack[++top] = c;
            }
            else
            {
                if (top == -1) return false;
                char open = stack[top--];
                if ((c == ')' && open != '(') || (c == '}' && open != '{') || (c == ']' && open != '['))
                    return false;
            }
        }
        return top == -1;
    }

// 6. Reverse Linked List
    public class ListNode
    {
        public int val;
        public ListNode next;
        public ListNode(int val = 0, ListNode next = null) { this.val = val; this.next = next; }
    }

    public static ListNode ReverseList(ListNode head)
    {
        ListNode prev = null;
        while (head != null)
        {
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }

// 7. Find Missing Number
    public static int FindMissingNumber(int[] nums)
    {
        int n = nums.Length + 1;
        int sum = n * (n + 1) / 2;
        int arraySum = 0;
        for (int i = 0; i < nums.Length; i++)
            arraySum += nums[i];

        return sum - arraySum;
    }

// 8. Top K Frequent Elements
    public static List<int> TopKFrequent(int[] nums, int k)
    {
        Dictionary<int, int> freqMap = new Dictionary<int, int>();
        foreach (var num in nums)
        {
            if (!freqMap.ContainsKey(num))
                freqMap[num] = 0;
            freqMap[num]++;
        }

        // Manual selection sort for getting top K frequent elements
        List<KeyValuePair<int, int>> freqList = new List<KeyValuePair<int, int>>(freqMap);
        for (int i = 0; i < freqList.Count; i++)
        {
            for (int j = i + 1; j < freqList.Count; j++)
            {
                if (freqList[i].Value < freqList[j].Value)
                {
                    var temp = freqList[i];
                    freqList[i] = freqList[j];
                    freqList[j] = temp;
                }
            }
        }

        List<int> result = new List<int>();
        for (int i = 0; i < k; i++)
            result.Add(freqList[i].Key);

        return result;
    }

// 9. Search Insert Position
    public static int SearchInsert(int[] nums, int target)
    {
        int left = 0, right = nums.Length - 1;
        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) return mid;
            else if (nums[mid] < target) left = mid + 1;
            else right = mid - 1;
        }
        return left;
    }

// 10. Jump Game
    public static bool CanJump(int[] nums)
    {
        int maxReach = 0;
        for (int i = 0; i < nums.Length; i++)
        {
            if (i > maxReach) return false;
            maxReach = maxReach > (i + nums[i]) ? maxReach : (i + nums[i]);
        }
        return true;
    }
